# -*- coding: utf-8 -*-
"""Untitled21.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1553lSqcKniwgyil8kxosz9PEj94Peh-3
"""

import pandas as pd

# Correct URL for the Titanic dataset (training set)
url = 'https://github.com/YBI-Foundation/Dataset/blob/main/Titanic.csv?raw=true'

# Load the dataset
titanic_df = pd.read_csv(url)

# Display the first few rows
print(titanic_df.head())

from sklearn.model_selection import train_test_split

# Split
train_df, test_df = train_test_split(titanic_df, test_size=0.2, random_state=42)

#shapes
print("Training set shape:", train_df.shape)
print("Testing set shape:", test_df.shape)

# Display
print(train_df.head())

#info
print(train_df.info())

# Statistics
print(train_df.describe())

# Check for missing values
print(train_df.isnull().sum())

# Fill missing values
train_df['age'].fillna(train_df['age'].median(), inplace=True) # Use the correct column name 'age'
train_df['embarked'].fillna(train_df['embarked'].mode()[0], inplace=True)
train_df['cabin'].fillna('Unknown', inplace=True)

# Check data types
print(train_df.dtypes)

# Convert data types if necessary
train_df['sex'] = train_df['sex'].astype('category')
train_df['embarked'] = train_df['embarked'].astype('category')

# Extract titles from the names
train_df['Title'] = train_df['name'].str.extract(' ([A-Za-z]+)\.', expand=False)
print(train_df['Title'].value_counts())

# Create a new feature for family size
train_df['FamilySize'] = train_df['sibsp'] + train_df['parch'] + 1
# Simplify the Cabin feature
train_df['cabin'] = train_df['cabin'].str[0]

import seaborn as sns
import matplotlib.pyplot as plt

# Distribution of Age
sns.histplot(train_df['age'], kde=True)
plt.title('Age Distribution')
plt.show()

# Distribution of Fare
sns.histplot(train_df['fare'], kde=True)
plt.title('Fare Distribution')
plt.show()

# Count of Survived
sns.countplot(x='survived', data=train_df)
plt.title('Survived Count')
plt.show()

# Survival rate by Sex
sns.barplot(x='sex', y='survived', data=train_df)
plt.title('Survival Rate by Sex')
plt.show()

# Survival rate by Pclass
sns.barplot(x='pclass', y='survived', data=train_df)
plt.title('Survival Rate by Pclass')
plt.show()

# Age vs. Survived
sns.boxplot(x='survived', y='age', data=train_df)
plt.title('Age vs. Survived')
plt.show()

sns.pairplot(train_df[['survived', 'pclass', 'age', 'fare']], hue='survived') # Removed 'sex' and 'embarked' as they are not numerical
plt.show()

# Heatmap of correlations
corr = train_df[['survived', 'pclass', 'age', 'fare']].corr() # Select only numerical columns for correlation
sns.heatmap(corr, annot=True, cmap='coolwarm')
plt.title('Correlation Heatmap')
plt.show()

# Check existing columns
print(train_df.columns)

# Drop unnecessary columns (if they exist)
if 'name' in train_df.columns:
    train_df.drop('name', axis=1, inplace=True)
if 'ticket' in train_df.columns:
    train_df.drop('ticket', axis=1, inplace=True)

# Continue with your code
# ...